swirl()
library(swirl)
install_from_swirl("R Programming")
swirf()
swirl()
5 + 7
x <- 5+7
x
y = x-3
y <- x-3
y
z -> c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
dy_div <- z/my_sqrt
dy_div <- z / my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0, 10, 100)
z*2 + 1000
my_div
swirf
swirl
swirl()
library(swirf)
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
dir()
info()
info()
skip()
args(list.files)
args(list.files())
old.dir <- getwd()
testdir <- dir.create()
dir.create(testdir)
?dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create()
?dir.create
dircreate("testdir2",file.path("testdir2","testdir3"),recursive = TRUE)
dir.create("testdir2",file.path("testdir2","testdir3"),recursive = TRUE)
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink("testdir",recursive = TRUE)
exit()
bye()
library("swirl")
swirl()
1:length(my_seq)
seq(along.with = my_seq)
bye()
library("swirl")
swirl()
my_vector(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matric(data = 1:20 , nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20 , nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patiens <- c("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
x <- 1:10
if(x > 5) {
x <- 0
}
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TURE) == FALSE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2 ,4 ,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(aov,c(1.4, 3.6, 7.9, 8.8))
evaluate(var,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Lu")
submit()
submit()
mad_libs(place = "home",adjectiv = "lu", nun = "lu")
submit()
submit()
"I" %p% "love" %p% "R"
'I' %p% 'love' %p% 'R'
'I' %p% 'love' %p% 'R!'
0
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
library("swirl")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$time
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class()
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library("swirl"")
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
bye()
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636-209.21429
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
head(plants, n= 10)
tail(plants)
tail(plants, n=15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
bye()
library("swirl")
swirl()
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob=c(0.3,0.7))
sample(c(0,1), 100, replace = TREU,prob=c(0.3,0.7))
sample(c(0,1), 100, replace = TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(filps)
sum(flips)
bye()
library("swirl")
swirl()
?rbinom
rbinom(1,size =100, prob|=0.7)
rbinom(1,size =100, prob=0.7)
flips2 <- rbinom(1, size=100,prob=0.7)
flips2 <- rbinom(n=100, size=1,prob=0.7)
flips2
sum(flips)
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist )
plot(y = cars$speed, x = cars$dist )
plot(x = cars$speed, y = cars$dist ,xlab = "Speed")
plot(x = cars$speed, y = cars$dist ,xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist , ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist ,xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist ,main = "My Plot")
plot(cars,main = "My Plot")
plot(cars,sub = "My Plot Subtitle")
plot(cars, col =2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("KernSmooth")
library(KernSmooth R)
library(KernSmooth)
install.packages(c("jsonlite", "manipulate", "RCurl", "stringr"))
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
fins_rtools()
find_rtools()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
print(tbl_df)
cran(tbl_df)
cran
?select
select(cran, ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "India")
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN"| country == "US")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!(is.na(r_version)))
filter(cran,!is.na(r_version))
cran2 <- select(carn, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/ 2^10)
mutate(cran, correct_size = size - 1000)
mutate(cran, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
0
library(swirl)
swirl
swirl()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
reset()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_count <- filter(pack_sum, count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
setwd("E:/postgraduate/coursera/CleanData/assignment/Get-CleanAssign1")
source("run_analysis.R")
View(result)
names(result)
source("run_analysis.R")
View(names)
names[2]
as.factor(names[2])
as.factor(names[,2])
as.vector(names[,2])
name[[2]]
names[[2]]
source("test.R")
source("test.R")
source("test.R")
source("test.R")
as.vector(names[2])
tmp <- as.vector(names[2])
tmp <- as.vector(names[[2])
tmp <- as.vector(names[[2]])
source("test.R")
source("test.R")
source("test.R")
source("test.R")
tmp <- "ssd"
tmp <- c("ssd","dd")
name <- names[[2]]
name <- as.vector(names[[2]])
source("test.R")
source("test.R")
View(result)
